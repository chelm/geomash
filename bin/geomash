#!/usr/bin/env node

/**
 * Geomash CLI tool
 * This utility is used for aggregating GeoJSON data into GeoHash grids. 
 * Note that unlike the node module in the codebase this utility 
 * does not persist data in a DB (for speed reasons)
 *
 * This utility can be used in two ways 
 * 
 * cat data.geojson | geomash -o out.json -p 7
 * 
 * OR 
 * 
 * geomash -f in.json -o out.json -p 7
 * 
 */

var stream = require('JSONStream'),
  async = require('async'),
  es = require('event-stream'),
  fs = require('fs'),
  geomash = require('../')

var agg = {}, 
  hash = undefined

var argv = require('optimist')
    .usage('Usage: $0 -f [input file] -o [output file] -p [precision number] -v ')
    .default('f', null)
    .default('o', null)
    .default('p', '9')
    .argv

var parser = stream.parse('features.*')

function finish(){
    if (argv.o){
      fs.writeFileSync(argv.o, JSON.stringify(agg))
    } else {
      console.log(JSON.stringify(agg))
    }
}

function add(f, callback){
  if (argv.v) {
    console.log(f)
  }

  var hash = geomash.createGeoHash(f, argv.p)
  if (!agg[hash]) {
    agg[hash] = 0
  }
  agg[hash]++

  // calling the callback forces the next feature thru the pipe
  callback()
}

var q = async.queue(add, 1)

q.drain = function(){
  finish()
}

if (argv.f){
  var read = fs.createReadStream(argv.f);
  read.pipe(parser)
    .pipe(es.mapSync(function (f) {
      q.push(f, function(){})
    }))
} else {
  process.stdin
    .pipe(parser)
    .pipe(es.mapSync(function (f) {
      q.push(f, function(){})
    }))
}
